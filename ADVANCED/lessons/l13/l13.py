# try –∏ except

from random import randint


# def get(text: str = None) -> int:
#     data = input(text)
#     try:
#         num = int(data)
#     except ValueError as e:
#         print(f'–í–∞—à –≤–≤–æ–¥ –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ ValueError: {e}')
#         num = 1
#         print(f'–ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ {num}')
#     return num

# if __name__ == '__main__':
#     number = get('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: ')
#     print(f'100 / {number} = {100 / number}')

"""
–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: —Å–æ—Ä–æ–∫ –¥–≤–∞
–í–∞—à –≤–≤–æ–¥ –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ ValueError: invalid literal for int() with base 10: '—Å–æ—Ä–æ–∫ –¥–≤–∞'
–ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ 1
100 / 1 = 100.0"""


# –¶–∏–∫–ª while –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞

# def get(text: str = None) -> int:
#     while True:
#         try:
#             num = int(input(text))
#             break
#         except ValueError as e:
#             print(f'–í–∞—à –≤–≤–æ–¥ –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ ValueError: {e}\n'
#                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
#     return num

# if __name__ == '__main__':
#     number = get('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: ')
#     print(f'100 / {number} = {100 / number}')


# –ö–æ–¥ –Ω–∏–∂–µ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞

# def get_data():
#     """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞. –ò–º–∏—Ç–∏—Ä—É–µ–º —ç—Ç–æ —á–µ—Ä–µ–∑ —Ä–∞–Ω–¥–æ–º"""
#     if result := randint(0,3):
#         return result
#     else:
#         raise ConnectionError

# MAX_COUNT = 5
# count = 0
# while count < MAX_COUNT:
#     count += 1
#     try:
#         data = get_data()
#         break
#     except ConnectionError as e:
#         print(f'–ü–æ–ø—ã—Ç–∫–∞ {count} –∏–∑ {MAX_COUNT} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π {e}')

# print(data)

"""
–ü–æ–ø—ã—Ç–∫–∞ 1 –∏–∑ 5 –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π
2"""

# –ù–µ—Å–∫–æ–ª—å–∫–æ except –¥–ª—è –æ–¥–Ω–æ–≥–æ try

# def hundred_div_num(text: str = None) -> tuple[int, float]:
#     while True:
#         try:
#             num = int(input(text))
#             div = 100 / num
#             break
#         except ValueError as e:
#             print(f'–í–∞—à –≤–≤–æ–¥ –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ ValueError: {e}\n'
#                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
#         except ZeroDivisionError as e:
#             div = float('inf')
#             break
#     return num, div

# if __name__ == '__main__':
#     n, d = hundred_div_num('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: ')
#     print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏: "100 / {n} = {d}"')


# –ö–æ–º–∞–Ω–¥–∞ else

# MAX_COUNT = 5
# result = None
# for count in range(1, MAX_COUNT + 1):
#     try:
#         num = int(input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: '))
#         print('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
#     except ValueError as e:
#         print(f'–ü–æ–ø—ã—Ç–∫–∞ {count} –∏–∑ {MAX_COUNT} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π {e}')
#     else:
#         result = 100 / num
#         break
# print(f'{result = }')


# –í–ª–æ–∂–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π

# MAX_COUNT = 5
# result = None
# for count in range(1, MAX_COUNT + 1):
#     try:
#         num = int(input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: '))
#         print('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
#     except ValueError as e:
#         print(f'–ü–æ–ø—ã—Ç–∫–∞ {count} –∏–∑ {MAX_COUNT} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π {e}')
#     else:
#         try:
#             result = 100 / num
#         except ZeroDivisionError as e:
#             result = float('inf')
#         break
# print(f'{result = }')


# –ö–æ–º–∞–Ω–¥–∞ finally

# def get(text: str = None) -> int:
#     num = None
#     try:
#         num = int(input(text))
#     except ValueError as e:
#         print(f'–í–∞—à –≤–≤–æ–¥ –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ ValueError: {e}')
#     finally:
#         return num if isinstance(num, int) else 1

# if __name__ == '__main__':
#     number = get('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–π –¥–µ–ª–∏—Ç–µ–ª—å: ')
#     try:
#         print(f'100 / {number} = {100 / number}')
#     except ZeroDivisionError as e:
#         print(f'–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è. –ü–æ–ª—É—á–∏–º {e}')


# –ë–ª–æ–∫ finally –±–µ–∑ except

# file = open('text.txt', 'r', encoding='utf-8')
# try:
#     data = file.read().split()
#     print(data[len(data)])
# finally:
#     print('–ó–∞–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª')
#     file.close()

"""
üî• –í–∞–∂–Ω–æ! –î–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—ã—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"""


# –ó–∞–¥–∞–Ω–∏–µ

# d = {'42': 73}
# try:
#     key, value = input('–ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: ').split()
#     if d[key] == value:
#         r = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ'
# except ValueError as e:
#     print(e)
# except KeyError as e:
#     print(e)
# else:
#     print(r)
# finally:
#     print(d)

# """
# –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: 42 13
# {'42': 73}
# Traceback (most recent call last):
#   File "c:\Users\Professional\Desktop\geekbrains\Python\ADVANCED\lessons\l13.py", line 171, in <module>
#     print(r)
#           ^
# NameError: name 'r' is not defined


# –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: 42 73 3
# too many values to unpack (expected 2)
# {'42': 73}


# –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: 73 42
# '73'
# {'42': 73}


# –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: 42 73
# {'42': 73}
# Traceback (most recent call last):
#   File "c:\Users\Professional\Desktop\geekbrains\Python\ADVANCED\lessons\l13.py", line 171, in <module>
#     print(r)
#           ^
# NameError: name 'r' is not defined
# """


# –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ raise

# def add_key(dct, key, value):
#     if key in dct:
#         raise KeyError(f'–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. {dct[key] = }')
#     dct[key] = value
#     return dct

# data = {'one': 1, 'two': 2}
# print(add_key(data, 'three', 3))
# print(add_key(data, 'three', 3))


# –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–ª–∞—Å—Å–∞—Ö

# class User:
#     def __init__(self, name, age):
#         if 6 < len(name) < 30:
#             self.name = name
#         else:
#             raise ValueError(f'–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 6 –∏ 30 —Å–∏–º–≤–æ–ª–∞–º–∏. {len(name) = }')
#         if not isinstance(age, (int, float)):
#             raise TypeError(f'–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ int –∏–ª–∏ float. {type(age) = }')
#         elif age < 0:
#             raise ValueError(f'–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. {age = }')
#         else:
#             self.age = age

# user = User('–Ø–∫–æ–≤', '-12')

# –ó–∞–¥–∞–Ω–∏–µ

def func(a, b, c):
    if a < b < c:
        raise ValueError('–ù–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–æ!')
    elif sum((a, b, c)) == 42:
        raise NameError('–≠—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ!')
    elif max(a, b, c, key=len) < 5:
        raise MemoryError('–°–ª–∏—à–∫–æ–º –≥–ª—É–ø!')
    else:
        raise RuntimeError('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!!!')

# func(11, 7, 3)
# """
# file "c:\Users\Professional\Desktop\geekbrains\Python\ADVANCED\lessons\l13.py", line 213, in func    
#     elif max(a, b, c, key=len) < 5:
#          ^^^^^^^^^^^^^^^^^^^^^
# TypeError: object of type 'int' has no len()"""

# func(3, 2, 3) # RuntimeError: –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!!!
# func(73, -40, 9) # NameError: –≠—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ!
# func(10, 20, 30) # ValueError: –ù–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–æ!

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π

from error0 import UserNameError, UserAgeError

class User:
    MIN_LEN = 6
    MAX_LEN = 30
    
    def __init__(self, name, age):
        if self.MIN_LEN < len(name) < self.MAX_LEN:
            self.name = name
        else:
            raise UserNameError
        if not isinstance(age, (int, float)) or age < 0:
            raise UserAgeError
        else:
            self.age = age

user = User('–Ø–∫–æ–≤', '-12')


# —Å–¥–µ–ª–∞–µ–º —á—É—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ

class User:
    def __init__(self, name, age):
        if 6 < len(name) < 30:
            self.name = name
        else:
            raise UserNameError(name)
        if not isinstance(age, (int, float)) or age < 0:
            raise UserAgeError(age)
        else:
            self.age = age
            
user = User('–Ø–∫–æ–≤', '-12')

# –ú–µ—Ç–æ–¥—ã __init__ –∏ __str__ –≤ –∫–ª–∞—Å—Å–∞—Ö —Å–≤–æ–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π

from error1 import UserNameError, UserAgeError

class User:
    MIN_LEN = 6
    MAX_LEN = 30
    
    def __init__(self, name, age):
        if self.MIN_LEN < len(name) < self.MAX_LEN:
            self.name = name
        else:
            raise UserNameError(name, self.MIN_LEN, self.MAX_LEN)
        if not isinstance(age, (int, float)) or age < 0:
            raise UserAgeError
        else:
            self.age = age

user = User('–Ø–∫–æ–≤', '-12')