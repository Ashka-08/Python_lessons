a = 42
print(type(a), id(a))
print(type(id))

def my_func():
    pass


def quadratic_equations(a: int | float, b: int | float, c: int | float) -> tuple[float, float] | float | None:
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 *a)
    elif d == 0:
        return -b / (2 * a)
    else:
        return None


print(quadratic_equations(2, -3, -9))

# –ü—Ä–∏–º–µ—Ä —Å –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏.
def no_mutable(a: int) -> int:
    a += 1
    print(f'In func {a = }') 
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return a


a = 42
print(f'In main {a = }')
z = no_mutable(a)
print(f'{a = }\t{z = }')

# –ü—Ä–∏–º–µ—Ä —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏.
def mutable(data: list[int]) -> list[int]:
    for i, item in enumerate(data):
        data[i] = item + 1
    print(f'In func {data = }') 
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return data

    
my_list = [2, 4, 6, 8]
print(f'In main {my_list = }')
new_list = mutable(my_list)
print(f'{my_list = }\t{new_list = }')


# –ù–µ—è–≤–Ω—ã–π return
def quadratic_equations(a, b, c):
    10
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a)
    if d == 0:
        return -b / (2 * a)
    # return None # –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å


# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def quadratic_equations(a, b=0, c=0):
    d = b ** 2 - 4 * a * c
    if d > 0:
        return (-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a)
    if d == 0:
        return -b / (2 * a)


print(quadratic_equations(2, -9))


# –ò–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
def from_one_to_n(n, data=None):
    if data is None:
        data = []
    for i in range(1, n + 1):
        data.append(i)
    return data


# –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
def combined_example(pos_only, /, standard, *, kwd_only):
    print(pos_only, standard, kwd_only) # –ü—Ä–∏–Ω—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –∞ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏


# combined_example(1, 2, 3) # TypeError
combined_example(1, 2, kwd_only=3)
combined_example(1, standard=2, kwd_only=3)
# combined_example(pos_only=1, standard=2, kwd_only=3) # TypeError


# –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
def triangulation(*, x, y, z):
    pass


triangulation(y=5, z=2, x=11)

# –ü–∞—Ä–∞–º–µ—Ç—Ä *args - –ª—é–±–æ–µ —á–∏—Å–ª–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–≤ –∫–æ—Ä—Ç–µ–∂)
def mean(*args):
    return sum(args) / len(args)


print(mean(*[1, 2, 3]))
print(mean(1, 2, 3))


# –ü–∞—Ä–∞–º–µ—Ç—Ä **kwargs,- –ª—é–±–æ–µ —á–∏—Å–ª–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
def school_print(**kwargs):
    for key, value in kwargs.items():
        print(f'–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É "{key}" –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {value}')


school_print(—Ö–∏–º–∏—è=5, —Ñ–∏–∑–∏–∫–∞=4, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞=5, —Ñ–∏–∑—Ä–∞=5)


# –û–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏: global –∏ nonlocal
def func(y: int) -> int:
    global x
    x += 100
    print(f'In func {x = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã, –Ω–æ –Ω–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–∏–Ω—Ç–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    return y + 1


x = 42
print(f'In main {x = }')
z = func(x)
print(f'{x = }\t{z = }')

def main(a):
    x = 1
    def func(y):
        nonlocal x
        x += 100
        print(f'In func {x = }') # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
        return y + 1
    return x + func(a)
x = 42
print(f'In main {x = }')
z = main(x)
print(f'{x = }\t{z = }')

# –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º
LIMIT = 1_000
def func(x, y):
    result = x ** y % LIMIT
    return result


print(func(42, 73))


# lambda parameters: action
my_dict = {'two': 2, 'one': 1, 'four': 4, 'three': 3, 'ten': 10}
s_key = sorted(my_dict.items()) 
#—Å–ª–æ–≤–∞—Ä—å —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–ª—é—á–∞–º, —Ç.–µ. –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.
s_value = sorted(my_dict.items(), key=lambda x: x[1])
# —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ç–æ—Ä–æ–º—É (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è) —ç–ª–µ–º–µ–Ω—Ç—É, —Ç.–µ. –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
print(f'{s_key = }\n{s_value = }')


# –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é __doc__.
def max_before_hundred(*args):
    """Return the maximum number not exceeding 100."""
    m = float('-inf')
    for item in args:
        if m < item < 100:
            m = item
    return m


print(max_before_hundred(-42, 73, 256, 0))


def max_before_hundred(*args):
    """Return the maximum number not exceeding 100.

    :param args: tuple of int or float numbers
    :return: int or float number from the tuple args
    """
    pass


# map(function, iterable)
texts = ["–ü—Ä–∏–≤–µ—Ç", "–ó–î–û–†–û–í–ê", "–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é"]
res = map(lambda x: x.lower(), texts)
print(*res)
# –ª—è–º–±–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ lower —É –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤


# filter(function, iterable)
numbers = [42, -73, 1024]
res = tuple(filter(lambda x: x > 0, numbers))
print(res)
# –õ—è–º–±–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω—É–ª—è. 
# –§—É–Ω–∫—Ü–∏—è tuple –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∫ –∫–æ—Ä—Ç–µ–∂—É —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.


# zip(*iterables, strict=False)
names = ["–ò–≤–∞–Ω", "–ù–∏–∫–æ–ª–∞–π", "–ü—ë—Ç—Ä"]
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary* award:.2f}')


# max(iterable, *[, key, default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä", 109_000)]
print(max(lst_1, default='empty'))
print(max(*lst_2))
print(max(lst_3, key=lambda x: x[1]))


# min(iterable, *[, key, default]) –∏–ª–∏ min(arg1, arg2, *args[, key])
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä", 109_000)]
print(min(lst_1, default='empty'))
print(min(*lst_2))
print(min(lst_3, key=lambda x: x[1]))


# sum(iterable, /, start=0)
my_list = [42, 256, 73]
print(sum(my_list))
print(sum(my_list, start=1024))


# all(iterable)
numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')


# any(iterable)
numbers = [42, -73, 1024]
if any(map(lambda x: x > 0, numbers)):
    print('–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π')
else:
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –±–æ–ª—å—à–µ –Ω—É–ª—è')


# chr(integer) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Æ–Ω–∏–∫–æ–¥ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
print(chr(97))
print(chr(1105))
print(chr(128519))


# ord(char) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ —Ç–∞–±–ª–∏—Ü–µ –Æ–Ω–∏–∫–æ–¥.
print(ord('a'))
print(ord('–∞'))
print(ord('üòâ'))


# locals() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞
SIZE = 10
def func(a, b, c):
    x = a + b
    print(locals())
    z = x + c
    return z
func(1, 2, 3)


# globals() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
# —Å–ª–æ–≤–∞—Ä—å globals –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

SIZE = 10
def func(a, b, c):
    x = a + b
    print(globals())
    z = x + c
    return z
print(globals())
print(func(1, 2, 3))


# vars() –∞–Ω–∞–ª–æ–≥ locals(). –ò–ª–∏ –≤–µ—Ä–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç __dict__ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
print(vars(int))


# –ó–∞–¥–∞–Ω–∏–µ
data = [25, -42, 146, 73, -100, 12]
print(list(map(str, data))) # ['25', '-42', '146', '73', '-100', '12']
print(max(data, key=lambda x: -x)) # -100
print(*filter(lambda x: not x[0].startswith('__'), globals().items()))
# ('data', [25, -42, 146, 73, -100, 12])
